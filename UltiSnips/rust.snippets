snippet le "Declare a variable"
let ${1:name} = ${2:value}
endsnippet

snippet lem "Declare a variable"
let mut ${1:name} = ${2:value}
endsnippet

snippet prl "println snippet"
println!("{}", ${1});
endsnippet

snippet permutation "next permutation"
pub trait LexicalPermutation {
    /// Return  if the slice was permuted,  if it is already
    /// at the last ordered permutation.
    fn next_permutation(&mut self) -> bool;
    /// Return  if the slice was permuted,  if it is already
    /// at the first ordered permutation.
    fn prev_permutation(&mut self) -> bool;
}

impl<T> LexicalPermutation for [T]
where
    T: Ord,
{
    /// Original author in Rust: Thomas Backman <serenity@exscape.org>
    fn next_permutation(&mut self) -> bool {
        // These cases only have 1 permutation each, so we can't do anything.
        if self.len() < 2 {
            return false;
        }

        // Step 1: Identify the longest, rightmost weakly decreasing part of the vector
        let mut i = self.len() - 1;
        while i > 0 && self[i - 1] >= self[i] {
            i -= 1;
        }

        // If that is the entire vector, this is the last-ordered permutation.
        if i == 0 {
            return false;
        }

        // Step 2: Find the rightmost element larger than the pivot (i-1)
        let mut j = self.len() - 1;
        while j >= i && self[j] <= self[i - 1] {
            j -= 1;
        }

        // Step 3: Swap that element with the pivot
        self.swap(j, i - 1);

        // Step 4: Reverse the (previously) weakly decreasing part
        self[i..].reverse();

        true
    }

    fn prev_permutation(&mut self) -> bool {
        // These cases only have 1 permutation each, so we can't do anything.
        if self.len() < 2 {
            return false;
        }

        // Step 1: Identify the longest, rightmost weakly increasing part of the vector
        let mut i = self.len() - 1;
        while i > 0 && self[i - 1] <= self[i] {
            i -= 1;
        }

        // If that is the entire vector, this is the first-ordered permutation.
        if i == 0 {
            return false;
        }

        // Step 2: Reverse the weakly increasing part
        self[i..].reverse();

        // Step 3: Find the rightmost element equal to or bigger than the pivot (i-1)
        let mut j = self.len() - 1;
        while j >= i && self[j - 1] < self[i - 1] {
            j -= 1;
        }

        // Step 4: Swap that element with the pivot
        self.swap(i - 1, j);

        true
    }
}
endsnippet

snippet converte_char_num "Converte char to num"
let num: i32 = c as i32 - 48;
endsnippet

snippet LCM "最小公倍数" 
fn lcm(a: i32, b: i32) -> i32 {
    let mut a = a;
    let mut b = b;

    let x = a * b;

    if a > b {
        let tmp = a;
        a = b;
        b = tmp;
    }

    let mut r = a % b;

    while r != 0 {
        a = b;
        b = r;
        r = a % b;
    }

    return x / b;
}
endsnippet

snippet GCD "最大公約数" 
fn gdg(a: i32, b: i32) -> i32 {
    let mut a = a;
    let mut b = b;

    if a > b {
        let tmp = a;
        a = b;
        b = tmp;
    }

    let mut r = a % b;

    while r != 0 {
        a = b;
        b = r;
        r = a % b;
    }

    return b;
}
endsnippet

snippet UnionFind "UnionFind"
struct UnionFind {
    size: usize,
    pos: Vec<isize>,
}

impl UnionFind {
    /// UnionFindを作る関数
    fn new(n: usize) -> Self {
        let size = n;
        let pos = vec![-1; n + 1];
        UnionFind { size, pos }
    }

    /// rootを探す関数
    fn find(&mut self, x: usize) -> usize {
        if self.pos[x] < 0 {
            x
        } else {
            let v = self.pos[x] as usize;
            self.pos[x] = self.find(v) as isize;
            self.pos[x] as usize
        }
    }

    /// xとyの木を結合する関数
    fn unite(&mut self, x: usize, y: usize) -> Result<(), ()> {
        let mut x = self.find(x);
        let mut y = self.find(y);

        // x, y共にrootが設定済みで尚且つ
        // rootが同じ時
        if x == y {
            return Err(());
        }
        if self.pos[x] > self.pos[y] {
            std::mem::swap(&mut x, &mut y);
        }
        // rootには木のsizeを格納するため足している
        self.pos[x] += self.pos[y];
        self.pos[y] = x as isize;

        Ok(())
    }

    fn same(&mut self, x: usize, y: usize) -> bool {
        self.find(x) == self.find(y)
    }

    fn size(&mut self, x: usize) -> usize {
        let x = self.find(x);
        -self.pos[x] as usize
    }
}
endsnippet

snippet padding "padding"
let mut c: Vec<Vec<char>> = c;

for i in 0..n {
		let mut cc = c[i].clone();
		cc.push('#');
		cc.reverse();
		cc.push('#');
		cc.reverse();

		c[i] = cc;
}

let top_bottom_padding: Vec<char> = vec!['#'; m + 2];
c.push(top_bottom_padding.clone());
c.reverse();
c.push(top_bottom_padding.clone());
c.reverse();
endsnippet

snippet BinarySearch "BinarySearch"
use std::cmp::Ordering;

pub trait BinarySearch<T> {
    fn lower_bound(&self, x: &T) -> usize;
    fn upper_bound(&self, x: &T) -> usize;
}

impl<T: Ord> BinarySearch<T> for [T] {
    fn lower_bound(&self, x: &T) -> usize {
        let mut low = 0;
        let mut high = self.len();

        while low != high {
            let mid = (low + high) / 2;
            match self[mid].cmp(x) {
                Ordering::Less => {
                    low = mid + 1;
                }
                Ordering::Equal | Ordering::Greater => {
                    high = mid;
                }
            }
        }
        low
    }

    fn upper_bound(&self, x: &T) -> usize {
        let mut low = 0;
        let mut high = self.len();

        while low != high {
            let mid = (low + high) / 2;
            match self[mid].cmp(x) {
                Ordering::Less | Ordering::Equal => {
                    low = mid + 1;
                }
                Ordering::Greater => {
                    high = mid;
                }
            }
        }
        low
    }
}
endsnippet

snippet format_radix "format_radix"
fn format_radix(mut x: u32, radix: u32) -> String {
    let mut result = vec![];

    loop {
        let m = x % radix;
        x = x / radix;

        result.push(std::char::from_digit(m, radix).unwrap());
        if x == 0 {
            break;
        }
    }
    result.into_iter().rev().collect()
}
endsnippet
